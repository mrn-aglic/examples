version: '3.8'


# ====================================== AIRFLOW environment VARIABLES =======================================
x-environment: &airflow_environment
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS: 'false'
  AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql://airflow:airflow@postgres:5432/airflow
  AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
  AIRFLOW_CONN_OWM_API: https://api.openweathermap.org
  AIRFLOW_CONN_LOCALS3: s3://user:password@?host=http%3A%2F%2Flocals3%3A9000
  HOURS_AGO: 4
  PYTHONASYNCIODEBUG: 1

x-depends_on: &airflow-depends-on
  postgres:
    condition: service_healthy

x-airflow-image: &airflow_image apache/airflow:2.5.3-python3.10

# ===========


services:
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    ports:
      - "5432:5432"

  initdb_adduser:
    image: *airflow_image
    depends_on:
      <<: *airflow-depends-on
    environment: *airflow_environment
    entrypoint: /bin/bash
    command: -c 'airflow db init && airflow users create --username airflow --password airflow --firstname Marin --lastname Marin --role Admin --email admin@example.org'

  webserver:
    image: *airflow_image
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    volumes:
      - logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    environment: *airflow_environment
    command: webserver
    depends_on:
      <<: *airflow-depends-on
      initdb_adduser:
        condition: service_completed_successfully

  scheduler:
    build: .
    image: airflow-http-requests-dtm
    restart: unless-stopped
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      <<: *airflow-depends-on
      initdb_adduser:
        condition: service_completed_successfully
    volumes:
      - ./dags:/opt/airflow/dags
      - logs:/opt/airflow/logs
      - ./data:/data
    environment: *airflow_environment
    command: scheduler

  triggerer:
    image: airflow-http-requests-dtm
    command: triggerer
    restart: unless-stopped
    env_file:
      - .env
    environment: *airflow_environment
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ./dags:/opt/airflow/dags
    depends_on:
      <<: *airflow-depends-on
      initdb_adduser:
        condition: service_completed_successfully


  locals3:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - ./minio/.env
    command: server --console-address ":9001" /weatherdata
    volumes:
      - locals3-data:/minio/weather_data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  locals3_init:
    build: ./minio/
    env_file:
      - ./minio/.env
    environment:
      - USER=user
      - COPY_DIR=false
      - INPUT_BUCKETS=weatherdata
    depends_on:
      - locals3
    entrypoint: /bin/sh ./entrypoint.sh

volumes:
  locals3-data:
  logs:
    name: airflow_logs
